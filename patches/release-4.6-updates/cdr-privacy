diff --git a/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.properties b/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.properties
index 6f22106..0827669 100644
--- a/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.properties
+++ b/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.properties
@@ -34,4 +34,11 @@ callresolver.SIP_CALLRESOLVER_CSE_QUEUE_SIZE.label=CSE Queue size
 callresolver.SIP_CALLRESOLVER_CDR_QUEUE_SIZE.label=CDR Queue size
 callresolver.SIP_CALLRESOLVER_MAX_CALL_LEN.label=Maximum call length
 callresolver.SIP_CALLRESOLVER_MAX_RINGING_CALL_LEN.label=Maximum Ringing call length
-callresolver.SIP_CALLRESOLVER_MIN_CLEANUP_INTERVAL.label=Minimum cleanup interval
\ No newline at end of file
+callresolver.SIP_CALLRESOLVER_MIN_CLEANUP_INTERVAL.label=Minimum cleanup interval
+callresolver.SIP_CALLRESOLVER_PRIVACY.label=Privacy Extension
+callresolver.SIP_CALLRESOLVER_PRIVACY.description=When enabled hides last digits of phone numbers into cdrs to enhance privacy
+callresolver.SIP_CALLRESOLVER_PRIVACY_LENGTH.label=Minimum length of extension that must be masquerade
+callresolver.SIP_CALLRESOLVER_PRIVACY_LENGTH.description=This value indicate the minimum length of extension that should be covered with *
+callresolver.SIP_CALLRESOLVER_PRIVACY_EXCLUDE.label=Prefix excluded from masquerading
+callresolver.SIP_CALLRESOLVER_PRIVACY_EXCLUDE.description=This helps to exclude some prefix to be masquerade for extension with length equal to minimum. 
+
diff --git a/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.xml b/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.xml
index 65016ce..0aa62fa 100644
--- a/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.xml
+++ b/sipXconfig/etc/sipxpbx/sipxcallresolver/sipxcallresolver.xml
@@ -116,5 +116,21 @@
       </type>
       <value />
     </setting>
+    <setting name="SIP_CALLRESOLVER_PRIVACY" advanced="yes">
+      <type refid="enablestate" />
+      <value>DISABLE</value>
+    </setting>
+    <setting name="SIP_CALLRESOLVER_PRIVACY_LENGTH" advanced="yes">
+      <type>
+        <integer min="4" max="25" />
+      </type>
+      <value>5</value>
+    </setting>
+    <setting name="SIP_CALLRESOLVER_PRIVACY_EXCLUDE" advanced="yes">
+      <type>
+        <string />
+      </type>
+      <value></value>
+    </setting>
   </group>
 </model>
diff --git a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/Cdr.java b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/Cdr.java
index 957aa67..faad33e 100644
--- a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/Cdr.java
+++ b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/Cdr.java
@@ -103,6 +103,28 @@ public class Cdr implements Serializable {
         m_callee = SipUri.extractUser(calleeAor);
     }
 
+    public void setMaskedCalleeAor(String calleeAor, int limit, String excluded) {
+        m_calleeAor = calleeAor;
+        m_callee = SipUri.extractUser(calleeAor);
+	if(m_callee.length() > limit) {
+	    m_callee = m_callee.substring(0, m_callee.length()-3)+"***";
+	} else {
+            if(m_callee.length()==limit) {
+                String[] exclude = excluded.split(" ");
+                boolean isExcluded = false;
+                for(String prefix:  exclude) {
+                    if(m_callee.startsWith(prefix)) {
+                       isExcluded = true;
+                       break;
+                    }
+                }
+                if(!isExcluded) {
+                    m_callee = m_callee.substring(0, m_callee.length()-3)+"***";
+                }
+            }
+        }
+    }
+
     public void setCalleeContact(String calleeContact) {
         m_calleeContact = calleeContact;
         m_recipient = SipUri.extractUser(calleeContact);
@@ -129,6 +151,28 @@ public class Cdr implements Serializable {
         m_caller = SipUri.extractFullUser(callerAor);
     }
 
+    public void setMaskedCallerAor(String callerAor, int limit, String excluded) {
+        m_callerAor = callerAor;
+        m_caller = SipUri.extractUser(callerAor);
+	if(m_caller.length() > limit) {
+	    m_caller = m_caller.substring(0, m_caller.length()-3)+"***";
+	}else {
+            if(m_caller.length()==limit) {
+                String[] exclude = excluded.split(" ");
+                boolean isExcluded = false;
+                for(String prefix:  exclude) {
+                    if(m_caller.startsWith(prefix)) {
+                       isExcluded = true;
+                       break;
+                    }
+                }
+                if(!isExcluded) {
+                    m_caller = m_caller.substring(0, m_caller.length()-3)+"***";
+                }
+            }
+        }
+    }
+
     public void setCallerContact(String callerContact) {
         m_callerContact = callerContact;
         m_originator = SipUri.extractFullUser(callerContact);
diff --git a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrManagerImpl.java b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrManagerImpl.java
index 60432eb..8fedabf 100644
--- a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrManagerImpl.java
+++ b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrManagerImpl.java
@@ -123,7 +123,15 @@ public class CdrManagerImpl extends JdbcDaoSupport implements CdrManager, Featur
 
     public List<Cdr> getCdrs(Date from, Date to, CdrSearch search, User user, int limit, int offset) {
         CdrsStatementCreator psc = new SelectAll(from, to, search, user, m_tz, limit, offset);
-        CdrsResultReader resultReader = new CdrsResultReader(m_tz);
+	boolean privacy = false;
+        int pLimit = 0;
+        String pExcluded = "";
+	if ( user==null ) {
+	    privacy = getSettings().getPrivacyStatus();
+            pLimit = getSettings().getPrivacyMinLength();
+            pExcluded = getSettings().getPrivacyExcludeList(); 
+        }
+        CdrsResultReader resultReader = new CdrsResultReader(m_tz, privacy, pLimit, pExcluded);
         getJdbcTemplate().query(psc, resultReader);
         return resultReader.getResults();
     }
@@ -365,9 +373,22 @@ public class CdrManagerImpl extends JdbcDaoSupport implements CdrManager, Featur
         private List<Cdr> m_cdrs = new ArrayList<Cdr>();
 
         private Calendar m_calendar;
+	private boolean m_privacy;
+        private int m_privacy_limit;
+        private String m_privacy_excluded;
+
+        public CdrsResultReader(TimeZone tz, boolean privacy, int limit, String excluded) {
+            m_calendar = Calendar.getInstance(tz);
+	    m_privacy = privacy;
+            m_privacy_limit = limit;
+            m_privacy_excluded = excluded;
+        }
 
         public CdrsResultReader(TimeZone tz) {
             m_calendar = Calendar.getInstance(tz);
+	    m_privacy = false;
+            m_privacy_limit = 0;
+            m_privacy_excluded = "";
         }
 
         public List<Cdr> getResults() {
@@ -376,8 +397,14 @@ public class CdrManagerImpl extends JdbcDaoSupport implements CdrManager, Featur
 
         public void processRow(ResultSet rs) throws SQLException {
             Cdr cdr = new Cdr();
-            cdr.setCalleeAor(rs.getString(CALLEE_AOR));
-            cdr.setCallerAor(rs.getString(CALLER_AOR));
+	    if (!m_privacy) {
+		cdr.setCalleeAor(rs.getString(CALLEE_AOR));
+		cdr.setCallerAor(rs.getString(CALLER_AOR));
+	    }
+	    else {
+		cdr.setMaskedCalleeAor(rs.getString(CALLEE_AOR), m_privacy_limit, m_privacy_excluded);
+		cdr.setMaskedCallerAor(rs.getString(CALLER_AOR), m_privacy_limit, m_privacy_excluded);
+	    }
             cdr.setCallId(rs.getString(CALL_ID));
             cdr.setReference(rs.getString(CALL_REFERENCE));
             cdr.setCallerInternal(rs.getBoolean(CALLER_INTERNAL));
diff --git a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrSettings.java b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrSettings.java
index d8940db..bc2a842 100644
--- a/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrSettings.java
+++ b/sipXconfig/neoconf/src/org/sipfoundry/sipxconfig/cdr/CdrSettings.java
@@ -30,6 +30,21 @@ public class CdrSettings extends PersistableSettings implements DeployConfigOnEd
         return (Integer) getSettingTypedValue("callresolver/SIP_CALLRESOLVER_AGENT_PORT");
     }
 
+    public boolean getPrivacyStatus() {
+	return (Boolean) getSettingTypedValue("callresolver/SIP_CALLRESOLVER_PRIVACY");
+    }
+
+    public int getPrivacyMinLength() {
+	return (Integer) getSettingTypedValue("callresolver/SIP_CALLRESOLVER_PRIVACY_LENGTH");
+    }
+
+    public String getPrivacyExcludeList() {
+        String excludeList = (String) getSettingTypedValue("callresolver/SIP_CALLRESOLVER_PRIVACY_EXCLUDE");
+        if( excludeList == null)
+            excludeList = "";
+	return excludeList;
+    }
+
     @Override
     protected Setting loadSettings() {
         return getModelFilesContext().loadModelFile("sipxcallresolver/sipxcallresolver.xml");
