From f3f3c53302e739df675c351074506305d8f063f5 Mon Sep 17 00:00:00 2001
From: amatig <amatig@gmail.com>
Date: Wed, 26 Jan 2011 12:04:56 +0100
Subject: [PATCH] Patch privacy cdr

---
 sipXproxy/src/cdr/lib/call_resolver.rb             |    6 +++++-
 sipXproxy/src/cdr/lib/db/cdr_writer.rb             |   20 +++++++++++++++++++-
 .../src/cdr/lib/utils/call_resolver_configure.rb   |   12 ++++++++++--
 3 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/sipXproxy/src/cdr/lib/call_resolver.rb b/sipXproxy/src/cdr/lib/call_resolver.rb
index 4a985e3..ee2c019 100644
--- a/sipXproxy/src/cdr/lib/call_resolver.rb
+++ b/sipXproxy/src/cdr/lib/call_resolver.rb
@@ -32,7 +32,11 @@ class CallResolver
       CseReader.new(url, purge_age_cse, config.cse_polling_interval, log)
     end
     install_signal_handler(@readers)
-    @writer = CdrWriter.new(@config.cdr_database_url, @config.purge_age_cdr, log)
+    if @config.privacy == Configure::ENABLE
+      @writer = CdrWriter.new(@config.cdr_database_url, @config.purge_age_cdr, log, @config.privacy_ext)
+    else
+      @writer = CdrWriter.new(@config.cdr_database_url, @config.purge_age_cdr, log)
+    end
     @long_calls_cleaner = Cleaner.new(@config.min_cleanup_interval, [:retire_long_calls,  @config.max_call_len])
     @long_ringing_calls_cleaner = Cleaner.new(@config.min_cleanup_interval, [:retire_long_ringing_calls,  @config.max_ringing_call_len])
     @failed_calls_cleaner = Cleaner.new(@config.min_cleanup_interval, [:flush_failed_calls,  @config.max_failed_wait])
diff --git a/sipXproxy/src/cdr/lib/db/cdr_writer.rb b/sipXproxy/src/cdr/lib/db/cdr_writer.rb
index c64a888..3e13d96 100644
--- a/sipXproxy/src/cdr/lib/db/cdr_writer.rb
+++ b/sipXproxy/src/cdr/lib/db/cdr_writer.rb
@@ -12,8 +12,25 @@ require 'db/dao'
 # Writes CDRs to the database
 class CdrWriter < Dao
   
-  def initialize(database_url, purge_age, log = nil)
+  def initialize(database_url, purge_age, log = nil, priv = nil)
     super(database_url, purge_age, 'cdrs', log)
+    @privacy = priv
+  end
+  
+  def privacy(row)
+    if row[4]=~ /^<sip:(.+)@(.+)>$/ and @privacy != nil
+      l1 = $1.length / 2
+      l1 = [l1, 3].min
+      if l1 > 0
+        @privacy.split(" ").each do |n|
+          if $1.length >= n.length and $1[0, n.length] == n
+            row[4] = "<sip:"+$1[0..-(l1+1)]+"*"*l1+"@"+$2+">"
+            break
+          end
+        end
+      end
+    end
+    return row
   end
   
   def run(queue)
@@ -22,6 +39,7 @@ class CdrWriter < Dao
       dbh.prepare(sql) do | sth |
         while cdr = queue.shift
           row = CdrWriter.row_from_cdr(cdr)
+          row = privacy(row)
           sth.execute(*row)
           check_purge(dbh)
         end
diff --git a/sipXproxy/src/cdr/lib/utils/call_resolver_configure.rb b/sipXproxy/src/cdr/lib/utils/call_resolver_configure.rb
index 6911db5..cb131e3 100644
--- a/sipXproxy/src/cdr/lib/utils/call_resolver_configure.rb
+++ b/sipXproxy/src/cdr/lib/utils/call_resolver_configure.rb
@@ -54,7 +54,13 @@ class CallResolverConfigure
   PURGE_AGE_CSE_DEFAULT = 7
 
   CSE_HOSTS = 'SIP_CALLRESOLVER_CSE_HOSTS'
-
+  
+  PRIVACY = 'SIP_CALLRESOLVER_PRIVACY'
+  PRIVACY_DEFAULT = Configure::DISABLE
+  
+  PRIVACY_EXT = 'SIP_CALLRESOLVER_PRIVACY_EXT'
+  PRIVACY_EXT_DEFAULT = 0
+  
   class << self
     def from_file(confdir = DEFAULT_CONF_DIR, logdir = DEFAULT_LOG_DIR)
       config_file =  File.join(confdir, CONFIG_FILE_NAME)
@@ -74,7 +80,7 @@ class CallResolverConfigure
     end
   end
 
-  attr_reader :cdr_database_url, :cse_database_urls, :cse_hosts, :log, :confdir, :logdir, :db_user
+  attr_reader :cdr_database_url, :cse_database_urls, :cse_hosts, :log, :confdir, :logdir, :db_user, :privacy, :privacy_ext
 
   def initialize(config, confdir = DEFAULT_CONF_DIR, logdir = DEFAULT_LOG_DIR)
     @config = config
@@ -100,6 +106,8 @@ class CallResolverConfigure
     # These two methods must get called in this order
     @cse_hosts, @ha = get_cse_hosts_config
     @cse_database_urls = get_cse_database_urls_config(@cse_hosts)
+    @privacy = config.fetch(PRIVACY,PRIVACY_DEFAULT)
+    @privacy_ext = config.fetch(PRIVACY_EXT, PRIVACY_EXT_DEFAULT)
   end
 
   # Return true if High Availability (HA) is enabled, false otherwise
-- 
1.7.3.5

