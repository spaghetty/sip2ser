# -*- ruby -*-

require 'logger'
require 'find'

$src_dir="@SRC_DIR@"
$our_dir="@FASTDATATEL_DIR@"
$build_dir="@BUILD_DIR@"
$log_file="fastdatatel_action.log"
$projects_file = "#{$our_dir}/projects"


logger = Logger.new($log_file)

base_config_string="--cache-file=`pwd`/ac-cache-file --prefix=/opt/`pwd | gawk -F /  '{ print $NF  }'` SIPXPBXUSER=`whoami` SIPXECS_NAME=OpSip OPENFIRE_HOME=/opt/openfire/ --enable-mrtg --enable-agent --enable-rpm"

iso_config_string="--enable-centos-iso ISO_DIR=./ RPM_DIST_DIR=./repo CENTOS_RSYNC_URL=rsync://mirrors.rit.edu OEM_DIR=/home/admin/sipxecs/sip2ser/mak/iso/"

packages_base = "autoconf automake make libtool createrepo gcc-c++ \
 rpm-build ruby libxml2 libxml2-devel js git wget  mock thttpd \
 "
missing_packages = "openacd homer resiprocate-devel mysql-connector-odbc"

gem_extra = ""

task :default => :config

task :test do
  puts $src_dir
  puts $our_dir
end

task :prereq do
  sh "sudo yum install -y #{packages_base}" 
  sh "sudo usermod -a -G mock $USER"
end

desc "Inizializza il sistema per compilare localmente"
task :build_env do
  if File.exists?("#{$build_dir}/config.status")
    Rake::Task[:prereq].invoke()
    sh "make {sipx,lib}.deps-list | grep -v sipx | xargs sudo yum install -y"
    sh "make {sipx,lib}.deps-build-list | grep -v sipx | xargs sudo yum install -y"
    sh "sudo yum install -y #{missing_packages}"
    gem_extra.split.each { |x| sh "sudo gem install #{x}" } #we need to remove this and start using our rpm
    sh "echo \"%_topdir      $HOME/rpmbuild\" >> ~/.rpmmacros"
    sh "mkdir -p ~/rpmbuild/{BUILD,SOURCES,RPMS,SRPMS,SPECS}"
  else
    puts "run _rake config_ first"
  end
end


task :create_mak_iso do
  puts "sip2ser iso"
  f1 = IO.readlines("#{$our_dir}/mak/s2s-iso.mk.in")
  f2 = File.new("#{$build_dir}/mak/12-s2s-iso.mk","w")
  f1.each do | x |
    f2.puts(x.chomp)
  end
  f2.close()
end

desc "Lancia il configure per attivare la modalita' di debug basta mettere come parametro la costante DEBUG"
task :config, [ :jdb ] do |t, args|
  if args[:jdb]=="DEBUG"
    sh "#{$src_dir}/configure  JAVAC_DEBUG=on #{base_config_string}"
    sh "rm -f 111-ISO"
    sh "touch 111-BUILD"
  elsif args[:jdb]=="ISO"
    sh "#{$src_dir}/configure #{iso_config_string}"
    Rake::Task[:create_mak_iso].invoke()
    sh "rm -f 111-BUILD"
    sh "touch 111-ISO"
  else
    sh "#{$src_dir}/configure #{base_config_string}"
    sh "rm -f 111-ISO"
    sh "touch 111-BUILD"
  end
  Rake::Task[:get_custom].invoke()
end

desc "Gestisce l'integrazione dei progetti esterni"
task :get_custom do
  if not File.directory? "#{$src_dir}/custom"
    sh "git clone http://git.sip2ser.net/custom #{$src_dir}/custom"
  end
end

desc "Sistemare il problema di data e ora del sistema"
task :datetime do
  sh "sudo echo UTC=true >> /etc/sysconfig/clock"
  sh "sudo hwclock --systohc --utc"
end

import "#{$our_dir}/resources/ks/Rakefile"
