# -*- ruby -*-

require 'logger'
require 'find'

$src_dir="@SRC_DIR@"
$our_dir="@FASTDATATEL_DIR@"
$build_dir="@BUILD_DIR@"
$log_file="fastdatatel_action.log"
$projects_file = "#{$our_dir}/projects"
$mock_root_dir="#{$build_dir}/mock/centos-6-x86_64/root"
$go_version="1.1.1"

logger = Logger.new($log_file)

base_config_string="--cache-file=`pwd`/ac-cache-file --prefix=/opt/`pwd | gawk -F /  '{ print $NF  }'` SIPXPBXUSER=`whoami` SIPXECS_NAME=OpSip OPENFIRE_HOME=/opt/openfire/ --enable-mrtg --enable-agent --enable-rpm"

iso_config_string="--enable-centos-iso ISO_DIR=./ RPM_DIST_DIR=./repo CENTOS_RSYNC_URL=rsync://mirrors.rit.edu OEM_DIR=/home/admin/sipxecs/sip2ser/mak/iso/"

packages_base = "autoconf automake make libtool createrepo gcc-c++ \
 rpm-build ruby libxml2 libxml2-devel js git wget  mock thttpd \
 "
missing_packages = "openacd homer resiprocate-devel mysql-connector-odbc \
gperftools-libs v8-devel oss_core-devel libdnet-devel poco-devel libconfig-devel libpcap-devel \
libtool-ltdl-devel libmcrypt-devel dart-sdk\
"

@s2s_packages = ["s2sfaxspool","s2scdrextractor","s2sopsip","s2smailproxy","s2srecorder","emacs-nox","telnet","sudo","dhcp","getmail","ssmtp","fail2bn","gperftools","mysql-server","wireshark","dart-sdk"]

gem_extra = ""

task :default => :config

task :test do
  puts $src_dir
  puts $our_dir
end

task :prereq do
  sh "sudo yum install -y #{packages_base}" 
  sh "sudo usermod -a -G mock $USER"
end

desc "Inizializza il sistema per compilare localmente"
task :build_env do
  if File.exists?("#{$build_dir}/config.status")
    Rake::Task[:prereq].invoke()
    sh "make {sipx,lib}.deps-list | grep -v sipx | xargs sudo yum install -y"
    sh "make {sipx,lib}.deps-build-list | grep -v sipx | xargs sudo yum install -y"
    sh "sudo yum install -y #{missing_packages}"
    gem_extra.split.each { |x| sh "sudo gem install #{x}" } #we need to remove this and start using our rpm
    sh "echo \"%_topdir      $HOME/rpmbuild\" >> ~/.rpmmacros"
    sh "mkdir -p ~/rpmbuild/{BUILD,SOURCES,RPMS,SRPMS,SPECS}"
  else
    puts "run _rake config_ first"
  end
end


task :create_mak_iso do
  puts "sip2ser iso"
  f1 = IO.readlines("#{$our_dir}/mak/s2s-iso.mk.in")
  f2 = File.new("#{$build_dir}/mak/12-s2s-iso.mk","w")
  f1.each do | x |
    f2.puts(x.chomp)
  end
  f2.close()
end

desc "Lancia il configure per attivare la modalita' di debug basta mettere come parametro la costante DEBUG"
task :config, [ :jdb ] do |t, args|
  if args[:jdb]=="DEBUG"
    sh "#{$src_dir}/configure  JAVAC_DEBUG=on #{base_config_string}"
    sh "rm -f 111-ISO"
    sh "touch 111-BUILD"
  elsif args[:jdb]=="ISO"
    sh "#{$src_dir}/configure #{iso_config_string}"
    Rake::Task[:create_mak_iso].invoke()
    sh "rm -f 111-BUILD"
    sh "touch 111-ISO"
  else
    sh "#{$src_dir}/configure #{base_config_string}"
    sh "rm -f 111-ISO"
    sh "touch 111-BUILD"
  end
  Rake::Task[:modules_inclusion].invoke()
  Rake::Task[:get_custom].invoke()
  if File.exists?("#{$mock_root_dir}/etc/bashrc")
    Rake::Task[:go_mock_install].invoke()
  end
end

desc "Installa go in ambiente chroot"
task :go_mock_install do
  if !File.directory?("#{$mock_root_dir}/go")
    sh "wget -o #{$mock_root_dir}/go#{$go_version}.src.tar.gz https://go.googlecode.com/files/go#{$go_version}.src.tar.gz"
    sh "tar cxzpvf go#{$go_version}.src.tar.gz #{$mock_root_dir}"
  end
  sh "sudo mkdir -p #{$build_dir}/mock/centos-6-x86_64/result"
  sh "sudo touch #{$build_dir}/mock/centos-6-x86_64/result/state.log"
  sh "sudo chmod 777 #{$build_dir}/mock/centos-6-x86_64/result/state.log"
  sh "mock -r centos-6-x86_64 --configdir=#{$build_dir}/mak/mock --shell --chroot /go/src/all.bash"
  $gobin="/go/bin"
  if File.readlines("#{$mock_root_dir}/etc/bashrc").grep(/GOROOT/).size<=0
    sh "mock -r centos-6-x86_64 --configdir=#{$build_dir}/mak/mock --chroot \'echo \"GOROOT=/go\" >> #{$mock_root_dir}/etc/bashrc\'"
    sh "echo \"GOROOT=/go\" >> #{$mock_root_dir}/etc/bashrc"
    sh "echo \"export GOROOT\" >> #{$mock_root_dir}/etc/bashrc"
    sh "echo \"PATH=$PATH:#{$gobin}\" >> #{$mock_root_dir}/etc/bashrc"
    sh "echo \"export PATH\" >> #{$mock_root_dir}/etc/bashrc"
  end
end

desc "Gestisce l'integrazione dei progetti esterni"
task :modules_inclusion do
  sh "cp -r #{$our_dir}/.modules* #{$build_dir}"
end

desc "Gestisce l'integrazione dei progetti esterni"
task :get_custom do
  if not File.directory? "#{$src_dir}/custom"
    sh "git clone http://git.sip2ser.net/custom #{$src_dir}/custom"
  end
end

desc "Sistemare il problema di data e ora del sistema"
task :datetime do
  sh "sudo echo UTC=true >> /etc/sysconfig/clock"
  sh "sudo hwclock --systohc --utc"
end

def get_deps(package)
  begin
    done=false
    if package.include? ':' 
      basename = package.sub!(/-[\d]:.*$/, "")
    else 
      basename = File.basename(package, ".rpm")
    end
    fetch_dep_cmd = "repoquery --requires --recursive --resolve --archlist=x86_64,noarch #{basename.chomp}"
    packages = `#{fetch_dep_cmd}`
    list = packages.split(/\n/)
    if list.length > 0
      list.each do |y|
        if y.include? ':' 
          x = y.sub!(/-[\d]:.*$/, "")
        else
          x = y
        end
        begin
          if (@s2s_packages.include?x)
            puts "#{x} ALREADY INCLUDED"
          else
            if !done
              @s2s_packages << x
              puts "GROWING: #{@s2s_packages} \n"
              get_deps(x)
            end
          end
        rescue 
          puts "No deps for #{x}"
        end
      end
    end
  rescue Exception => ex
    puts "Done for Nil package #(package)"
  end
end




desc "Risoluzione ricorsiva di tutte le dipendenze dei pacchetti. Output in file "
task :resolv_deps, [ :package, :dest_file, :clean] do |t, args|
  puts args[:package]
  puts args[:dest_file]
  if args[:package]!=nil and args[:package]!=''
    @s2s_packages = ["#{args[:package]}"]
  end
  if args[:dest_file]!=nil and args[:dest_file]!=''
    target = args[:dest_file]
  else 
    target = 'deps_list'
  end
  if args[:clean]=='CLEAN'
    File.delete(target)
  end
  begin
    File.open(target,'a') do |f2|
      @s2s_packages.each do |x|
        get_deps(x)
      end
      @s2s_packages.each do |x|
        if x!=nil
          if x.include? ':' 
            basename = x.sub!(/-[\d]:.*$/, "")
          else 
            basename = File.basename(x, ".rpm")
          end
          puts "Added:  #{basename} "
          f2.puts "#{basename} \n"
        end
      end
      f2.puts "\n"
    end
  rescue Exception => e
    puts e
  end
end


desc "Download di una lista di pacchetti"
task :get_packages, [:source_file] do |t, args| 
  if args[:source_file]!=nil and args[:source_file]!=''
    src = args[:source_file]
  else 
    src = 'deps_list'
  end
  begin
    File.open(src,'r') do |f1|
      while line=f1.gets
        puts line
        download_cmd = "sudo yumdownloader --archlist=x86_64,noarch --resolve --destdir=iso #{line.chomp}"
        `#{download_cmd}`
      end
    end
  rescue Exception => e
    puts e
  end
end

import "#{$our_dir}/resources/ks/Rakefile"
